generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client/storage"
}

datasource db {
  provider = "mysql"
  url      = env("STORAGE_DATABASE_URI")
}

model access_control_whitelisted_targets {
  id                                          Int      @id @default(autoincrement())
  account_id                                  String   @db.VarChar(10)
  command_id                                  String   @db.VarChar(10)
  reader_id                                   String   @db.VarChar(10)
  receiver_id                                 String   @db.VarChar(10)
  is_access_control_whitelisted_target_active Boolean  @default(false)
  created_at                                  DateTime @default(now()) @db.DateTime(0)
  updated_at                                  DateTime @default(now()) @db.DateTime(0)

  @@unique([account_id, command_id, reader_id, receiver_id], map: "unique_account_id_command_id_reader_id_receiver_id")
  @@index([account_id], map: "idx_account_id")
  @@index([command_id], map: "idx_command_id")
  @@index([created_at], map: "idx_created_at")
  @@index([is_access_control_whitelisted_target_active], map: "idx_is_access_control_whitelisted_target_active")
  @@index([reader_id], map: "idx_reader_id")
  @@index([receiver_id], map: "idx_receiver_id")
  @@index([updated_at], map: "idx_updated_at")
}

model application_types {
  id                                Int                                 @id @default(autoincrement())
  application_type                  String                              @unique(map: "application_type") @db.VarChar(255)
  created_at                        DateTime                            @default(now()) @db.DateTime(0)
  updated_at                        DateTime                            @default(now()) @db.DateTime(0)
  monitor_applications              monitor_applications?
  sigma_cloud_access_control_events sigma_cloud_access_control_events[]
  sigma_cloud_alarm_events          sigma_cloud_alarm_events[]
  users                             users[]

  @@index([application_type], map: "idx_application_type")
  @@index([created_at], map: "idx_created_at")
  @@index([updated_at], map: "idx_updated_at")
}

model authentication_types {
  id                  Int                @id @default(autoincrement())
  authentication_type String             @unique(map: "authentication_type") @db.VarChar(255)
  created_at          DateTime           @default(now()) @db.DateTime(0)
  updated_at          DateTime           @default(now()) @db.DateTime(0)
  api_gateway_apis    api_gateway_apis[]

  @@index([authentication_type], map: "idx_authentication_type")
  @@index([created_at], map: "idx_created_at")
  @@index([updated_at], map: "idx_updated_at")
}

model database_types {
  id            Int         @id @default(autoincrement())
  database_type String      @unique(map: "database_type") @db.VarChar(255)
  created_at    DateTime    @default(now()) @db.DateTime(0)
  updated_at    DateTime    @default(now()) @db.DateTime(0)
  databases     databases[]

  @@index([created_at], map: "idx_created_at")
  @@index([database_type], map: "idx_database_type")
  @@index([updated_at], map: "idx_updated_at")
}

model databases {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique(map: "name") @db.VarChar(255)
  database_type         String                  @db.VarChar(255)
  host                  Bytes?
  port                  Int?
  database              Bytes?
  username              Bytes
  password              Bytes
  connect_string        Bytes?
  created_at            DateTime                @default(now()) @db.DateTime(0)
  updated_at            DateTime                @default(now()) @db.DateTime(0)
  database_types        database_types          @relation(fields: [database_type], references: [database_type], onDelete: Cascade, onUpdate: NoAction, map: "databases_ibfk_1")
  queries               queries[]
  query_gateway_queries query_gateway_queries[]

  @@index([created_at], map: "idx_created_at")
  @@index([database_type], map: "idx_database_type")
  @@index([name], map: "idx_name")
  @@index([port], map: "idx_port")
  @@index([updated_at], map: "idx_updated_at")
}

model method_types {
  id                                                                                          Int                @id @default(autoincrement())
  method_type                                                                                 String             @unique(map: "method_type") @db.VarChar(255)
  created_at                                                                                  DateTime           @default(now()) @db.DateTime(0)
  updated_at                                                                                  DateTime           @default(now()) @db.DateTime(0)
  api_gateway_apis_api_gateway_apis_basic_and_bearer_authentication_method_typeTomethod_types api_gateway_apis[] @relation("api_gateway_apis_basic_and_bearer_authentication_method_typeTomethod_types")
  api_gateway_apis_api_gateway_apis_method_typeTomethod_types                                 api_gateway_apis[] @relation("api_gateway_apis_method_typeTomethod_types")

  @@index([created_at], map: "idx_created_at")
  @@index([method_type], map: "idx_method_type")
  @@index([updated_at], map: "idx_updated_at")
}

model monitor_applications {
  id                            Int               @id @default(autoincrement())
  application_type              String            @unique(map: "application_type") @db.VarChar(255)
  api_gateway_api_id            Int
  response_map                  Json?
  is_alive                      Boolean           @default(true)
  is_monitor_application_active Boolean           @default(false)
  is_alive_transition_at        DateTime          @default(now()) @db.DateTime(0)
  created_at                    DateTime          @default(now()) @db.DateTime(0)
  updated_at                    DateTime          @default(now()) @db.DateTime(0)
  application_types             application_types @relation(fields: [application_type], references: [application_type], onDelete: Cascade, onUpdate: NoAction, map: "monitor_applications_ibfk_1")
  api_gateway_apis              api_gateway_apis  @relation(fields: [api_gateway_api_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "monitor_applications_ibfk_2")

  @@index([application_type], map: "idx_application_type")
  @@index([created_at], map: "idx_created_at")
  @@index([is_alive], map: "idx_is_alive")
  @@index([is_alive_transition_at], map: "idx_is_alive_transition_at")
  @@index([is_monitor_application_active], map: "idx_is_monitor_application_active")
  @@index([updated_at], map: "idx_updated_at")
  @@index([api_gateway_api_id], map: "idx_api_gateway_api_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model neppo_satisfaction_surveys {
  id            Int      @id @default(autoincrement())
  sequential_id String   @db.VarChar(255)
  defect        String   @db.VarChar(255)
  phone         String   @db.VarChar(255)
  status        String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  started_at    DateTime @db.DateTime(0)
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)

  @@unique([sequential_id, type], map: "unique_sequential_id_type")
  @@index([created_at], map: "idx_created_at")
  @@index([defect], map: "idx_defect")
  @@index([phone], map: "idx_phone")
  @@index([sequential_id], map: "idx_sequential_id")
  @@index([status], map: "idx_status")
  @@index([type], map: "idx_type")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model network_tracker_events {
  id                       Int                   @id @default(autoincrement())
  network_tracker_hosts_id Int
  code                     String                @db.VarChar(255)
  status                   String                @default("pending") @db.VarChar(255)
  created_at               DateTime              @default(now()) @db.DateTime(0)
  updated_at               DateTime              @default(now()) @db.DateTime(0)
  network_tracker_hosts    network_tracker_hosts @relation(fields: [network_tracker_hosts_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "network_tracker_events_ibfk_1")

  @@index([code], map: "idx_code")
  @@index([created_at], map: "idx_created_at")
  @@index([network_tracker_hosts_id], map: "idx_network_tracker_hosts_id")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
}

model network_tracker_hosts {
  id                     Int                      @id @default(autoincrement())
  ip                     String                   @unique(map: "ip") @db.VarChar(255)
  description            String                   @db.VarChar(255)
  account_id             String                   @db.VarChar(255)
  partition_id           String                   @db.VarChar(255)
  zone_id                String?                  @db.VarChar(255)
  consecutive_successes  Int                      @default(0)
  consecutive_failures   Int                      @default(0)
  is_alive               Boolean                  @default(true)
  is_alive_transition_at DateTime                 @default(now()) @db.DateTime(0)
  created_at             DateTime                 @default(now()) @db.DateTime(0)
  updated_at             DateTime                 @default(now()) @db.DateTime(0)
  network_tracker_events network_tracker_events[]

  @@index([account_id], map: "idx_account_id")
  @@index([consecutive_failures], map: "idx_consecutive_failures")
  @@index([consecutive_successes], map: "idx_consecutive_successes")
  @@index([created_at], map: "idx_created_at")
  @@index([description], map: "idx_description")
  @@index([ip], map: "idx_ip")
  @@index([is_alive], map: "idx_is_alive")
  @@index([is_alive_transition_at], map: "idx_is_alive_transition_at")
  @@index([partition_id], map: "idx_partition_id")
  @@index([updated_at], map: "idx_updated_at")
  @@index([zone_id], map: "idx_zone_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model queries {
  id              Int       @id @default(autoincrement())
  name            String    @unique(map: "name") @db.VarChar(255)
  group_name      String?   @db.VarChar(255)
  databases_id    Int
  sql             String    @db.LongText
  variable_map    Json?
  replacement_map Json?
  is_query_active Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime  @default(now()) @db.DateTime(0)
  databases       databases @relation(fields: [databases_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "queries_ibfk_1")

  @@index([created_at], map: "idx_created_at")
  @@index([databases_id], map: "idx_databases_id")
  @@index([group_name], map: "idx_group_name")
  @@index([is_query_active], map: "idx_is_query_active")
  @@index([name], map: "idx_name")
  @@index([updated_at], map: "idx_updated_at")
}

model response_types {
  id               Int                @id @default(autoincrement())
  response_type    String             @unique(map: "response_type") @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  api_gateway_apis api_gateway_apis[]

  @@index([created_at], map: "idx_created_at")
  @@index([response_type], map: "idx_response_type")
  @@index([updated_at], map: "idx_updated_at")
}

model role_types {
  id         Int      @id @default(autoincrement())
  role_type  String   @unique(map: "role_type") @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@index([created_at], map: "idx_created_at")
  @@index([role_type], map: "idx_role_type")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                Int               @id @default(autoincrement())
  application_type  String            @db.VarChar(255)
  role_list         Json
  username          String            @db.VarChar(255)
  password          Bytes
  is_user_active    Boolean           @default(false)
  created_at        DateTime          @default(now()) @db.DateTime(0)
  updated_at        DateTime          @default(now()) @db.DateTime(0)
  application_types application_types @relation(fields: [application_type], references: [application_type], onDelete: Cascade, onUpdate: NoAction, map: "users_ibfk_1")

  @@unique([application_type, username], map: "unique_application_type_username")
  @@index([application_type], map: "idx_application_type")
  @@index([created_at], map: "idx_created_at")
  @@index([is_user_active], map: "idx_is_user_active")
  @@index([updated_at], map: "idx_updated_at")
  @@index([username], map: "idx_username")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model access_control_whatsapp_events {
  id                   Int      @id @default(autoincrement())
  account              String   @db.VarChar(255)
  code                 String   @db.VarChar(255)
  company_id           String   @db.VarChar(255)
  complement           String   @db.VarChar(255)
  event_id             String   @db.VarChar(255)
  protocol_type        String   @db.VarChar(255)
  receiver_description String   @db.VarChar(255)
  status               String   @db.VarChar(255)
  created_at           DateTime @default(now()) @db.DateTime(0)
  updated_at           DateTime @default(now()) @db.DateTime(0)

  @@index([account], map: "idx_account")
  @@index([code], map: "idx_code")
  @@index([company_id], map: "idx_company_id")
  @@index([complement], map: "idx_complement")
  @@index([created_at], map: "idx_created_at")
  @@index([event_id], map: "idx_event_id")
  @@index([protocol_type], map: "idx_protocol_type")
  @@index([receiver_description], map: "idx_receiver_description")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model api_gateway_apis {
  id                                                                                      Int                    @id @default(autoincrement())
  name                                                                                    String                 @unique(map: "name") @db.VarChar(255)
  group_name                                                                              String?                @db.VarChar(255)
  authentication_type                                                                     String?                @db.VarChar(255)
  basic_and_bearer_authentication_method_type                                             String?                @db.VarChar(255)
  method_type                                                                             String                 @db.VarChar(255)
  response_type                                                                           String                 @db.VarChar(255)
  api_key_authentication_key                                                              Bytes?
  api_key_authentication_header_name                                                      Bytes?
  basic_authentication_username                                                           Bytes?
  basic_authentication_password                                                           Bytes?
  basic_and_bearer_authentication_url                                                     String?                @db.VarChar(255)
  basic_and_bearer_authentication_query_parameter_map                                     Json?
  basic_and_bearer_authentication_header_map                                              Json?
  basic_and_bearer_authentication_body                                                    Json?
  basic_and_bearer_authentication_token_extractor_list                                    Json?
  basic_and_bearer_authentication_expiration_extractor_list                               Json?
  basic_and_bearer_authentication_expiration_buffer                                       Int?
  bearer_authentication_token                                                             Bytes?
  url                                                                                     String                 @db.VarChar(255)
  query_parameter_map                                                                     Json?
  header_map                                                                              Json?
  body                                                                                    Json?
  is_api_gateway_api_active                                                               Boolean                @default(false)
  created_at                                                                              DateTime               @default(now()) @db.DateTime(0)
  updated_at                                                                              DateTime               @default(now()) @db.DateTime(0)
  authentication_types                                                                    authentication_types?  @relation(fields: [authentication_type], references: [authentication_type], onDelete: Cascade, onUpdate: NoAction, map: "api_gateway_apis_ibfk_1")
  method_types_api_gateway_apis_basic_and_bearer_authentication_method_typeTomethod_types method_types?          @relation("api_gateway_apis_basic_and_bearer_authentication_method_typeTomethod_types", fields: [basic_and_bearer_authentication_method_type], references: [method_type], onDelete: Cascade, onUpdate: NoAction, map: "api_gateway_apis_ibfk_2")
  method_types_api_gateway_apis_method_typeTomethod_types                                 method_types           @relation("api_gateway_apis_method_typeTomethod_types", fields: [method_type], references: [method_type], onDelete: Cascade, onUpdate: NoAction, map: "api_gateway_apis_ibfk_3")
  response_types                                                                          response_types         @relation(fields: [response_type], references: [response_type], onDelete: Cascade, onUpdate: NoAction, map: "api_gateway_apis_ibfk_4")
  monitor_applications                                                                    monitor_applications[]

  @@index([authentication_type], map: "idx_authentication_type")
  @@index([basic_and_bearer_authentication_expiration_buffer], map: "idx_basic_and_bearer_authentication_expiration_buffer")
  @@index([basic_and_bearer_authentication_method_type], map: "idx_basic_and_bearer_authentication_method_type")
  @@index([basic_and_bearer_authentication_url], map: "idx_basic_and_bearer_authentication_url")
  @@index([created_at], map: "idx_created_at")
  @@index([group_name], map: "idx_group_name")
  @@index([is_api_gateway_api_active], map: "idx_is_api_gateway_api_active")
  @@index([method_type], map: "idx_method_type")
  @@index([name], map: "idx_name")
  @@index([response_type], map: "idx_response_type")
  @@index([updated_at], map: "idx_updated_at")
  @@index([url], map: "idx_url")
}

model fence_tracker_triggers {
  id         Int      @id @default(autoincrement())
  key        String   @unique(map: "key") @db.VarChar(255)
  quantity   Int
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@index([created_at], map: "idx_created_at")
  @@index([key], map: "idx_key")
  @@index([quantity], map: "idx_quantity")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model sigma_cloud_access_control_events {
  id                   Int               @id @default(autoincrement())
  application_type     String            @db.VarChar(255)
  account              String            @db.VarChar(255)
  code                 String            @db.VarChar(255)
  company_id           Int               @db.UnsignedInt
  complement           String            @db.VarChar(255)
  event_id             String            @db.VarChar(255)
  protocol_type        String            @db.VarChar(255)
  receiver_description String            @db.VarChar(255)
  status               String            @db.VarChar(255)
  created_at           DateTime          @default(now()) @db.DateTime(0)
  updated_at           DateTime          @default(now()) @db.DateTime(0)
  application_types    application_types @relation(fields: [application_type], references: [application_type], onDelete: Cascade, onUpdate: NoAction, map: "sigma_cloud_access_control_events_ibfk_1")

  @@index([account], map: "idx_account")
  @@index([application_type], map: "idx_application_type")
  @@index([code], map: "idx_code")
  @@index([company_id], map: "idx_company_id")
  @@index([complement], map: "idx_complement")
  @@index([created_at], map: "idx_created_at")
  @@index([event_id], map: "idx_event_id")
  @@index([protocol_type], map: "idx_protocol_type")
  @@index([receiver_description], map: "idx_receiver_description")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model sigma_cloud_alarm_events {
  id                Int               @id @default(autoincrement())
  application_type  String            @db.VarChar(255)
  account           String            @db.VarChar(255)
  auxiliary         String            @db.VarChar(255)
  code              String            @db.VarChar(255)
  company_id        String            @db.VarChar(255)
  complement        String            @db.VarChar(255)
  event_id          String            @db.VarChar(255)
  event_log         String            @db.VarChar(255)
  partition         String            @db.VarChar(255)
  protocol_type     String            @db.VarChar(255)
  status            String            @db.VarChar(255)
  created_at        DateTime          @default(now()) @db.DateTime(0)
  updated_at        DateTime          @default(now()) @db.DateTime(0)
  application_types application_types @relation(fields: [application_type], references: [application_type], onDelete: Cascade, onUpdate: NoAction, map: "sigma_cloud_alarm_events_ibfk_1")

  @@index([account], map: "idx_account")
  @@index([application_type], map: "idx_application_type")
  @@index([auxiliary], map: "idx_auxiliary")
  @@index([code], map: "idx_code")
  @@index([company_id], map: "idx_company_id")
  @@index([complement], map: "idx_complement")
  @@index([created_at], map: "idx_created_at")
  @@index([event_id], map: "idx_event_id")
  @@index([event_log], map: "idx_event_log")
  @@index([partition], map: "idx_partition")
  @@index([protocol_type], map: "idx_protocol_type")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
}

model sigma_cloud_d_guard_integration_layouts {
  id                                        Int                                     @id @default(autoincrement())
  guid                                      String                                  @db.VarChar(255)
  sigma_cloud_d_guard_integration_server_id Int
  created_at                                DateTime                                @default(now()) @db.DateTime(0)
  updated_at                                DateTime                                @default(now()) @db.DateTime(0)
  sigma_cloud_d_guard_integration_servers   sigma_cloud_d_guard_integration_servers @relation(fields: [sigma_cloud_d_guard_integration_server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sigma_cloud_d_guard_integration_layouts_ibfk_1")

  @@unique([guid, sigma_cloud_d_guard_integration_server_id], map: "unique_guid_sigma_cloud_d_guard_integration_server_id")
  @@index([created_at], map: "idx_created_at")
  @@index([guid], map: "idx_guid")
  @@index([updated_at], map: "idx_updated_at")
  @@index([sigma_cloud_d_guard_integration_server_id], map: "idx_sigma_cloud_d_guard_integration_server_id")
}

model sigma_cloud_d_guard_integration_servers {
  id                                               Int                                            @id @default(autoincrement())
  ip                                               String                                         @unique(map: "ip") @db.VarChar(255)
  port                                             Int
  username                                         Bytes
  password                                         Bytes
  is_sigma_cloud_d_guard_integration_server_active Boolean                                        @default(false)
  created_at                                       DateTime                                       @default(now()) @db.DateTime(0)
  updated_at                                       DateTime                                       @default(now()) @db.DateTime(0)
  sigma_cloud_d_guard_integration_layouts          sigma_cloud_d_guard_integration_layouts[]
  sigma_cloud_d_guard_integration_workstations     sigma_cloud_d_guard_integration_workstations[]

  @@index([created_at], map: "idx_created_at")
  @@index([ip], map: "idx_ip")
  @@index([is_sigma_cloud_d_guard_integration_server_active], map: "idx_is_sigma_cloud_d_guard_integration_server_active")
  @@index([port], map: "idx_port")
  @@index([updated_at], map: "idx_updated_at")
}

model sigma_cloud_d_guard_integration_workstations {
  id                                        Int                                     @id @default(autoincrement())
  guid                                      String                                  @db.VarChar(255)
  sigma_cloud_d_guard_integration_server_id Int
  created_at                                DateTime                                @default(now()) @db.DateTime(0)
  updated_at                                DateTime                                @default(now()) @db.DateTime(0)
  sigma_cloud_d_guard_integration_servers   sigma_cloud_d_guard_integration_servers @relation(fields: [sigma_cloud_d_guard_integration_server_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sigma_cloud_d_guard_integration_workstations_ibfk_1")

  @@unique([guid, sigma_cloud_d_guard_integration_server_id], map: "unique_guid_sigma_cloud_d_guard_integration_server_id")
  @@index([created_at], map: "idx_created_at")
  @@index([guid], map: "idx_guid")
  @@index([updated_at], map: "idx_updated_at")
  @@index([sigma_cloud_d_guard_integration_server_id], map: "idx_sigma_cloud_d_guard_integration_server_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model query_gateway_queries {
  id                            Int       @id @default(autoincrement())
  name                          String    @unique(map: "name") @db.VarChar(255)
  group_name                    String?   @db.VarChar(255)
  database_id                   Int
  sql                           String    @db.LongText
  variable_map                  Json?
  replacement_map               Json?
  is_query_gateway_query_active Boolean   @default(false)
  created_at                    DateTime  @default(now()) @db.DateTime(0)
  updated_at                    DateTime  @default(now()) @db.DateTime(0)
  databases                     databases @relation(fields: [database_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "query_gateway_queries_ibfk_1")

  @@index([created_at], map: "idx_created_at")
  @@index([database_id], map: "idx_database_id")
  @@index([group_name], map: "idx_group_name")
  @@index([is_query_gateway_query_active], map: "idx_is_query_gateway_query_active")
  @@index([name], map: "idx_name")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model sigma_cloud_neppo_integration_satisfaction_surveys {
  id               Int      @id @default(autoincrement())
  sequential_id    Int      @db.UnsignedInt
  defect           String   @db.VarChar(255)
  registered_phone String   @db.VarChar(255)
  normalized_phone String?  @db.VarChar(255)
  status           String   @db.VarChar(255)
  type             String   @db.VarChar(255)
  started_at       DateTime @db.DateTime(0)
  created_at       DateTime @default(now()) @db.DateTime(0)
  updated_at       DateTime @default(now()) @db.DateTime(0)

  @@unique([sequential_id, type], map: "unique_sequential_id_type")
  @@index([created_at], map: "idx_created_at")
  @@index([defect], map: "idx_defect")
  @@index([normalized_phone], map: "idx_normalized_phone")
  @@index([registered_phone], map: "idx_registered_phone")
  @@index([sequential_id], map: "idx_sequential_id")
  @@index([started_at], map: "idx_started_at")
  @@index([status], map: "idx_status")
  @@index([type], map: "idx_type")
  @@index([updated_at], map: "idx_updated_at")
}
