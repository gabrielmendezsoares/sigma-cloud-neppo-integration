generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client/storage"
}

datasource db {
  provider = "mysql"
  url      = env("STORAGE_DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model apis {
  id                                                                          Int                    @id @default(autoincrement())
  name                                                                        String                 @unique(map: "name") @db.VarChar(255)
  group_name                                                                  String?                @db.VarChar(255)
  authentication_type                                                         String?                @db.VarChar(255)
  basic_and_bearer_authentication_method_type                                 String?                @db.VarChar(255)
  oauth_authentication_grant_type                                             String?                @db.VarChar(255)
  method_type                                                                 String                 @db.VarChar(255)
  response_type                                                               String                 @db.VarChar(255)
  api_key_authentication_key                                                  Bytes?
  api_key_authentication_header_name                                          String?                @db.VarChar(255)
  basic_authentication_username                                               Bytes?
  basic_authentication_password                                               Bytes?
  basic_and_bearer_authentication_url                                         String?                @db.VarChar(255)
  basic_and_bearer_authentication_query_parameter_map                         Json?
  basic_and_bearer_authentication_header_map                                  Json?
  basic_and_bearer_authentication_body                                        Json?
  basic_and_bearer_authentication_token_extractor_list                        Json?
  basic_and_bearer_authentication_expiration_extractor_list                   Json?
  basic_and_bearer_authentication_expiration_buffer                           Int?
  bearer_authentication_token                                                 Bytes?
  oauth_authentication_client_id                                              Bytes?
  oauth_authentication_client_secret                                          Bytes?
  oauth_authentication_token_url                                              String?                @db.VarChar(255)
  oauth_authentication_authorization_url                                      String?                @db.VarChar(255)
  oauth_authentication_redirect_url                                           String?                @db.VarChar(255)
  oauth_authentication_scope                                                  String?                @db.VarChar(255)
  oauth_authentication_access_token_extractor_list                            Json?
  oauth_authentication_refresh_token_extractor_list                           Json?
  oauth_authentication_expiration_extractor_list                              Json?
  oauth_authentication_expiration_buffer                                      Int?
  oauth_authentication_pkce_enabled                                           Boolean?
  oauth_authentication_additional_parameter_map                               Json?
  url                                                                         String                 @db.VarChar(255)
  query_parameter_map                                                         Json?
  header_map                                                                  Json?
  body                                                                        Json?
  is_api_active                                                               Boolean                @default(false)
  created_at                                                                  DateTime               @default(now()) @db.DateTime(0)
  updated_at                                                                  DateTime               @default(now()) @db.DateTime(0)
  authentication_types                                                        authentication_types?  @relation(fields: [authentication_type], references: [authentication_type], onDelete: Cascade, onUpdate: NoAction, map: "apis_ibfk_1")
  method_types_apis_basic_and_bearer_authentication_method_typeTomethod_types method_types?          @relation("apis_basic_and_bearer_authentication_method_typeTomethod_types", fields: [basic_and_bearer_authentication_method_type], references: [method_type], onDelete: Cascade, onUpdate: NoAction, map: "apis_ibfk_2")
  grant_types                                                                 grant_types?           @relation(fields: [oauth_authentication_grant_type], references: [grant_type], onDelete: Cascade, onUpdate: NoAction, map: "apis_ibfk_3")
  method_types_apis_method_typeTomethod_types                                 method_types           @relation("apis_method_typeTomethod_types", fields: [method_type], references: [method_type], onDelete: Cascade, onUpdate: NoAction, map: "apis_ibfk_4")
  response_types                                                              response_types         @relation(fields: [response_type], references: [response_type], onDelete: Cascade, onUpdate: NoAction, map: "apis_ibfk_5")
  monitor_applications                                                        monitor_applications[]

  @@index([api_key_authentication_header_name], map: "idx_api_key_authentication_header_name")
  @@index([authentication_type], map: "idx_authentication_type")
  @@index([basic_and_bearer_authentication_expiration_buffer], map: "idx_basic_and_bearer_authentication_expiration_buffer")
  @@index([basic_and_bearer_authentication_method_type], map: "idx_basic_and_bearer_authentication_method_type")
  @@index([basic_and_bearer_authentication_url], map: "idx_basic_and_bearer_authentication_url")
  @@index([created_at], map: "idx_created_at")
  @@index([group_name], map: "idx_group_name")
  @@index([is_api_active], map: "idx_is_api_active")
  @@index([method_type], map: "idx_method_type")
  @@index([name], map: "idx_name")
  @@index([oauth_authentication_authorization_url], map: "idx_oauth_authentication_authorization_url")
  @@index([oauth_authentication_expiration_buffer], map: "idx_oauth_authentication_expiration_buffer")
  @@index([oauth_authentication_grant_type], map: "idx_oauth_authentication_grant_type")
  @@index([oauth_authentication_pkce_enabled], map: "idx_oauth_authentication_pkce_enabled")
  @@index([oauth_authentication_redirect_url], map: "idx_oauth_authentication_redirect_url")
  @@index([oauth_authentication_scope], map: "idx_oauth_authentication_scope")
  @@index([oauth_authentication_token_url], map: "idx_oauth_authentication_token_url")
  @@index([response_type], map: "idx_response_type")
  @@index([updated_at], map: "idx_updated_at")
  @@index([url], map: "idx_url")
}

model application_types {
  id                   Int                   @id @default(autoincrement())
  application_type     String                @unique(map: "application_type") @db.VarChar(255)
  created_at           DateTime              @default(now()) @db.DateTime(0)
  updated_at           DateTime              @default(now()) @db.DateTime(0)
  monitor_applications monitor_applications?
  users                users[]

  @@index([application_type], map: "idx_application_type")
  @@index([created_at], map: "idx_created_at")
  @@index([updated_at], map: "idx_updated_at")
}

model authentication_types {
  id                  Int      @id @default(autoincrement())
  authentication_type String   @unique(map: "authentication_type") @db.VarChar(255)
  created_at          DateTime @default(now()) @db.DateTime(0)
  updated_at          DateTime @default(now()) @db.DateTime(0)
  apis                apis[]

  @@index([authentication_type], map: "idx_authentication_type")
  @@index([created_at], map: "idx_created_at")
  @@index([updated_at], map: "idx_updated_at")
}

model d_guard_layouts {
  id                 Int             @id @default(autoincrement())
  guid               String          @db.VarChar(255)
  d_guard_servers_id Int
  created_at         DateTime        @default(now()) @db.DateTime(0)
  updated_at         DateTime        @default(now()) @db.DateTime(0)
  d_guard_servers    d_guard_servers @relation(fields: [d_guard_servers_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "d_guard_layouts_ibfk_1")

  @@unique([guid, d_guard_servers_id], map: "unique_guid_d_guard_servers_id")
  @@index([created_at], map: "idx_created_at")
  @@index([guid], map: "idx_guid")
  @@index([updated_at], map: "idx_updated_at")
  @@index([d_guard_servers_id], map: "idx_d_guard_servers_id")
}

model d_guard_servers {
  id                   Int                    @id @default(autoincrement())
  ip                   String                 @unique(map: "ip") @db.VarChar(255)
  port                 Int
  username             Bytes
  password             Bytes
  created_at           DateTime               @default(now()) @db.DateTime(0)
  updated_at           DateTime               @default(now()) @db.DateTime(0)
  d_guard_layouts      d_guard_layouts[]
  d_guard_workstations d_guard_workstations[]

  @@index([created_at], map: "idx_created_at")
  @@index([ip], map: "idx_ip")
  @@index([port], map: "idx_port")
  @@index([updated_at], map: "idx_updated_at")
}

model d_guard_workstations {
  id                 Int             @id @default(autoincrement())
  guid               String          @db.VarChar(255)
  d_guard_servers_id Int
  created_at         DateTime        @default(now()) @db.DateTime(0)
  updated_at         DateTime        @default(now()) @db.DateTime(0)
  d_guard_servers    d_guard_servers @relation(fields: [d_guard_servers_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "d_guard_workstations_ibfk_1")

  @@unique([guid, d_guard_servers_id], map: "unique_guid_d_guard_servers_id")
  @@index([created_at], map: "idx_created_at")
  @@index([guid], map: "idx_guid")
  @@index([updated_at], map: "idx_updated_at")
  @@index([d_guard_servers_id], map: "idx_d_guard_servers_id")
}

model database_types {
  id            Int         @id @default(autoincrement())
  database_type String      @unique(map: "database_type") @db.VarChar(255)
  created_at    DateTime    @default(now()) @db.DateTime(0)
  updated_at    DateTime    @default(now()) @db.DateTime(0)
  databases     databases[]

  @@index([created_at], map: "idx_created_at")
  @@index([database_type], map: "idx_database_type")
  @@index([updated_at], map: "idx_updated_at")
}

model databases {
  id             Int            @id @default(autoincrement())
  name           String         @unique(map: "name") @db.VarChar(255)
  database_type  String         @db.VarChar(255)
  host           Bytes?
  port           Int?
  database       Bytes?
  username       Bytes
  password       Bytes
  connect_string Bytes?
  created_at     DateTime       @default(now()) @db.DateTime(0)
  updated_at     DateTime       @default(now()) @db.DateTime(0)
  database_types database_types @relation(fields: [database_type], references: [database_type], onDelete: Cascade, onUpdate: NoAction, map: "databases_ibfk_1")
  queries        queries[]

  @@index([created_at], map: "idx_created_at")
  @@index([database_type], map: "idx_database_type")
  @@index([name], map: "idx_name")
  @@index([port], map: "idx_port")
  @@index([updated_at], map: "idx_updated_at")
}

model grant_types {
  id         Int      @id @default(autoincrement())
  grant_type String   @unique(map: "grant_type") @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  apis       apis[]

  @@index([created_at], map: "idx_created_at")
  @@index([grant_type], map: "idx_grant_type")
  @@index([updated_at], map: "idx_updated_at")
}

model method_types {
  id                                                                  Int      @id @default(autoincrement())
  method_type                                                         String   @unique(map: "method_type") @db.VarChar(255)
  created_at                                                          DateTime @default(now()) @db.DateTime(0)
  updated_at                                                          DateTime @default(now()) @db.DateTime(0)
  apis_apis_basic_and_bearer_authentication_method_typeTomethod_types apis[]   @relation("apis_basic_and_bearer_authentication_method_typeTomethod_types")
  apis_apis_method_typeTomethod_types                                 apis[]   @relation("apis_method_typeTomethod_types")

  @@index([created_at], map: "idx_created_at")
  @@index([method_type], map: "idx_method_type")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model queries {
  id              Int       @id @default(autoincrement())
  name            String    @unique(map: "name") @db.VarChar(255)
  group_name      String?   @db.VarChar(255)
  databases_id    Int
  sql             String    @db.LongText
  variable_map    Json?
  replacement_map Json?
  is_query_active Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime  @default(now()) @db.DateTime(0)
  databases       databases @relation(fields: [databases_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "queries_ibfk_1")

  @@index([created_at], map: "idx_created_at")
  @@index([databases_id], map: "idx_databases_id")
  @@index([group_name], map: "idx_group_name")
  @@index([is_query_active], map: "idx_is_query_active")
  @@index([name], map: "idx_name")
  @@index([updated_at], map: "idx_updated_at")
}

model response_types {
  id            Int      @id @default(autoincrement())
  response_type String   @unique(map: "response_type") @db.VarChar(255)
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)
  apis          apis[]

  @@index([created_at], map: "idx_created_at")
  @@index([response_type], map: "idx_response_type")
  @@index([updated_at], map: "idx_updated_at")
}

model role_types {
  id         Int      @id @default(autoincrement())
  role_type  String   @unique(map: "role_type") @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@index([created_at], map: "idx_created_at")
  @@index([role_type], map: "idx_role_type")
  @@index([updated_at], map: "idx_updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                Int               @id @default(autoincrement())
  application_type  String            @db.VarChar(255)
  role_list         Json
  username          String            @db.VarChar(255)
  password          Bytes
  is_user_active    Boolean           @default(false)
  created_at        DateTime          @default(now()) @db.DateTime(0)
  updated_at        DateTime          @default(now()) @db.DateTime(0)
  application_types application_types @relation(fields: [application_type], references: [application_type], onDelete: Cascade, onUpdate: NoAction, map: "users_ibfk_1")

  @@unique([application_type, username], map: "unique_application_type_username")
  @@index([application_type], map: "idx_application_type")
  @@index([created_at], map: "idx_created_at")
  @@index([is_user_active], map: "idx_is_user_active")
  @@index([updated_at], map: "idx_updated_at")
  @@index([username], map: "idx_username")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model neppo_satisfaction_surveys {
  id            Int      @id @default(autoincrement())
  sequential_id String   @db.VarChar(255)
  defect        String   @db.VarChar(255)
  phone         String   @db.VarChar(255)
  status        String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  started_at    DateTime @db.DateTime(0)
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)

  @@unique([sequential_id, type], map: "unique_sequential_id_type")
  @@index([created_at], map: "idx_created_at")
  @@index([phone], map: "idx_phone")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
  @@index([defect], map: "idx_defect")
  @@index([sequential_id], map: "idx_sequential_id")
  @@index([type], map: "idx_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model network_tracker_events {
  id                       Int                   @id @default(autoincrement())
  network_tracker_hosts_id Int
  code                     String                @db.VarChar(255)
  status                   String                @default("pending") @db.VarChar(255)
  created_at               DateTime              @default(now()) @db.DateTime(0)
  updated_at               DateTime              @default(now()) @db.DateTime(0)
  network_tracker_hosts    network_tracker_hosts @relation(fields: [network_tracker_hosts_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "network_tracker_events_ibfk_1")

  @@index([code], map: "idx_code")
  @@index([created_at], map: "idx_created_at")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
  @@index([network_tracker_hosts_id], map: "idx_network_tracker_hosts_id")
}

model network_tracker_hosts {
  id                     Int                      @id @default(autoincrement())
  ip                     String                   @unique(map: "ip") @db.VarChar(255)
  description            String                   @db.VarChar(255)
  account_id             String                   @db.VarChar(255)
  partition_id           String                   @db.VarChar(255)
  zone_id                String?                  @db.VarChar(255)
  consecutive_successes  Int                      @default(0)
  consecutive_failures   Int                      @default(0)
  is_alive               Boolean                  @default(true)
  is_alive_transition_at DateTime                 @default(now()) @db.DateTime(0)
  created_at             DateTime                 @default(now()) @db.DateTime(0)
  updated_at             DateTime                 @default(now()) @db.DateTime(0)
  network_tracker_events network_tracker_events[]

  @@index([created_at], map: "idx_created_at")
  @@index([ip], map: "idx_ip")
  @@index([is_alive], map: "idx_is_alive")
  @@index([updated_at], map: "idx_updated_at")
  @@index([account_id], map: "idx_account_id")
  @@index([consecutive_failures], map: "idx_consecutive_failures")
  @@index([consecutive_successes], map: "idx_consecutive_successes")
  @@index([description], map: "idx_description")
  @@index([is_alive_transition_at], map: "idx_is_alive_transition_at")
  @@index([partition_id], map: "idx_partition_id")
  @@index([zone_id], map: "idx_zone_id")
}

model controle_acesso_wpp {
  id         Int                        @id @default(autoincrement())
  data_json  Json
  created_at DateTime                   @default(now())
  updated_at DateTime                   @default(now())
  status     controle_acesso_wpp_status @default(pendente)
}

model controle_acesso_wpp_sesmt {
  id         Int                              @id @default(autoincrement())
  data_json  Json
  created_at DateTime                         @default(now())
  updated_at DateTime                         @default(now())
  status     controle_acesso_wpp_sesmt_status @default(pendente)
}

model fence_alerts {
  id         Int      @id @default(autoincrement())
  key        String   @unique(map: "key") @db.VarChar(255)
  quantity   Int
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@index([created_at], map: "idx_created_at")
  @@index([key], map: "idx_key")
  @@index([quantity], map: "idx_quantity")
  @@index([updated_at], map: "idx_updated_at")
}

model monitor_applications {
  id                                      Int               @id @default(autoincrement())
  application_type                        String            @unique(map: "application_type") @db.VarChar(255)
  apis_id                                 Int
  is_alive                                Boolean           @default(true)
  is_alive_transition_notified_by_monitor Boolean           @default(false)
  is_monitor_application_active           Boolean           @default(false)
  is_alive_transition_at                  DateTime          @default(now()) @db.DateTime(0)
  created_at                              DateTime          @default(now()) @db.DateTime(0)
  updated_at                              DateTime          @default(now()) @db.DateTime(0)
  application_types                       application_types @relation(fields: [application_type], references: [application_type], onDelete: Cascade, onUpdate: NoAction, map: "monitor_applications_ibfk_1")
  apis                                    apis              @relation(fields: [apis_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "monitor_applications_ibfk_2")

  @@index([apis_id], map: "idx_apis_id")
  @@index([application_type], map: "idx_application_type")
  @@index([created_at], map: "idx_created_at")
  @@index([is_alive], map: "idx_is_alive")
  @@index([is_alive_transition_at], map: "idx_is_alive_transition_at")
  @@index([is_alive_transition_notified_by_monitor], map: "idx_is_alive_transition_notified_by_monitor")
  @@index([is_monitor_application_active], map: "idx_is_monitor_application_active")
  @@index([updated_at], map: "idx_updated_at")
}

model ordens_servico_wpp {
  id         Int                       @id @default(autoincrement())
  data_json  Json
  created_at DateTime                  @default(now())
  updated_at DateTime                  @default(now())
  status     ordens_servico_wpp_status @default(pendente)
  id_os      Int?
}

enum controle_acesso_wpp_status {
  pendente
  aberta
}

enum controle_acesso_wpp_sesmt_status {
  pendente
  aberta
}

enum ordens_servico_wpp_status {
  pendente
  aberta
}
