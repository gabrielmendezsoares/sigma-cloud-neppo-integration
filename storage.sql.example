SET GLOBAL event_scheduler = ON;


SET FOREIGN_KEY_CHECKS = 0;


DROP TABLE IF EXISTS `application_types`;
DROP TABLE IF EXISTS `role_types`;


DROP TABLE IF EXISTS `sigma_cloud_neppo_integration_satisfaction_surveys`;
DROP TABLE IF EXISTS `users`;


DROP EVENT IF EXISTS `delete_sigma_cloud_neppo_integration_satisfaction_surveys`;


DROP PROCEDURE IF EXISTS `validate_user`;


SET FOREIGN_KEY_CHECKS = 1;


CREATE TABLE `application_types` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `application_type` VARCHAR(255) NOT NULL UNIQUE,
    `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (`id`),

    INDEX `idx_application_type` (`application_type`),
    INDEX `idx_created_at` (`created_at`),
    INDEX `idx_updated_at` (`updated_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `role_types` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `role_type` VARCHAR(255) NOT NULL UNIQUE,
    `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (`id`),

    INDEX `idx_role_type` (`role_type`),
    INDEX `idx_created_at` (`created_at`),
    INDEX `idx_updated_at` (`updated_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


CREATE TABLE `sigma_cloud_neppo_integration_satisfaction_surveys` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `sequential_id` INT UNSIGNED NOT NULL,
    `defect` VARCHAR(255) NOT NULL,
    `registered_phone` VARCHAR(255) NOT NULL,
    `normalized_phone` VARCHAR(255),
    `status` VARCHAR(255) NOT NULL,
    `type` VARCHAR(255) NOT NULL,
    `started_at` DATETIME NOT NULL,
    `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CHECK (`status` IN ('failed', 'pending', 'sent')),
    CHECK (`type` IN ('cloud', 'desktop')),

    PRIMARY KEY (`id`),
    
    UNIQUE KEY `unique_sequential_id_type` (`sequential_id`, `type`),

    INDEX `idx_sequential_id` (`sequential_id`),
    INDEX `idx_defect` (`defect`),
    INDEX `idx_registered_phone` (`registered_phone`),
    INDEX `idx_normalized_phone` (`normalized_phone`),
    INDEX `idx_status` (`status`),
    INDEX `idx_type` (`type`),
    INDEX `idx_started_at` (`started_at`),
    INDEX `idx_created_at` (`created_at`),
    INDEX `idx_updated_at` (`updated_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `users` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `application_type` VARCHAR(255) NOT NULL,
    `role_list` JSON NOT NULL,
    `username` VARCHAR(255) NOT NULL,
    `password` LONGBLOB NOT NULL,
    `is_user_active` BOOLEAN NOT NULL DEFAULT FALSE,
    `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT `role_list` CHECK (JSON_TYPE(`role_list`) = 'ARRAY'),

    PRIMARY KEY (`id`),

    FOREIGN KEY (`application_type`) REFERENCES `application_types`(`application_type`) ON DELETE CASCADE,

    UNIQUE KEY `unique_application_type_username` (`application_type`, `username`),

    INDEX `idx_application_type` (`application_type`),
    INDEX `idx_username` (`username`),
    INDEX `idx_is_user_active` (`is_user_active`),
    INDEX `idx_created_at` (`created_at`),
    INDEX `idx_updated_at` (`updated_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


CREATE EVENT `delete_sigma_cloud_neppo_integration_satisfaction_surveys`
ON SCHEDULE EVERY 1 DAY
DO
  DELETE FROM sigma_cloud_neppo_integration_satisfaction_surveys
  WHERE created_at < NOW() - INTERVAL 3 MONTH;


DELIMITER //


CREATE PROCEDURE `validate_user`(
    IN `role_list` JSON,
    OUT `is_valid` BOOLEAN,
    OUT `error_message` VARCHAR(255)
)
BEGIN
    DECLARE `index` INT DEFAULT 0;
    DECLARE `array_size` INT;
    DECLARE `current_role` VARCHAR(255);
    
    SET `is_valid` = TRUE;
    SET `error_message` = NULL;
    SET `array_size` = JSON_LENGTH(`role_list`);
      
    role_validation_loop: WHILE `index` < `array_size` DO
        SET `current_role` = JSON_UNQUOTE(JSON_EXTRACT(`role_list`, CONCAT('$[', `index`, ']')));

        IF NOT EXISTS (SELECT 1 FROM `role_types` WHERE `role_type` COLLATE utf8mb4_unicode_ci = `current_role`) THEN
            SET `is_valid` = FALSE;
            SET `error_message` = CONCAT('Invalid role_list: Role "', `current_role`, '" does not exist in the role_types table');
            
            LEAVE role_validation_loop;
        END IF;
        
        SET `index` = `index` + 1;
    END WHILE role_validation_loop;
END;
//


CREATE TRIGGER `before_users_insert`
BEFORE INSERT ON `users`
FOR EACH ROW
BEGIN
    DECLARE `is_valid` BOOLEAN DEFAULT TRUE;
    DECLARE `error_message` VARCHAR(255);

    CALL `validate_user`(
        NEW.`role_list`,
        `is_valid`,
        `error_message`
    );

    IF NOT `is_valid` THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = `error_message`;
    END IF;
END;
//

CREATE TRIGGER `before_users_update`
BEFORE UPDATE ON `users`
FOR EACH ROW
BEGIN
    DECLARE `is_valid` BOOLEAN DEFAULT TRUE;
    DECLARE `error_message` VARCHAR(255);

    CALL `validate_user`(
        NEW.`role_list`,
        `is_valid`,
        `error_message`
    );

    IF NOT `is_valid` THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = `error_message`;
    END IF;
END;
//


DELIMITER ;
